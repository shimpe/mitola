TITLE:: DegreeMapper
summary:: conversion between score degrees and scala degrees
categories:: Microtonal utils
related:: Classes/Mitola, Classes/ScalaCalculator

DESCRIPTION::
a class that can map between score degrees and scala degrees. The two are different in case of a degree mapping that is set up.
Using a degree mapping of e.g.
code::
Dictionary[1->1,2->3, 3->5, 4->6, 5->8, 6->10, 7->12]
::
degrees 1,2,3,4,5,6,7 in the score map to degrees 1,3,5,6,8,10,12 in the scala definition. This can be used e.g. to define a diatonic major key based on the 12EDO scala definition.



CLASSMETHODS::

METHOD:: new
New creates a new DegreeMapper

ARGUMENT:: max_scala_degree_1based
max degree number (Integer) as defined in the scala definition

ARGUMENT:: score_to_scala_1based
mapping from score degrees to scala degrees (Dictionary[Integer->Integer])

returns:: a new DegreeMapper

INSTANCEMETHODS::

METHOD:: max_scala_degree
	an Integer indicating what the highest scala degree is (1-based)
	

returns:: an Integer
METHOD:: score_to_scala_lookup
	a Dictionary mapping from score degrees to scala degrees. If set to nil, there's a one-to-one correspondence between score and scala degrees.
	

returns:: a Dictionary
METHOD:: max_score_degree
	max score degree (1-based)
	

returns:: an Integer
METHOD:: init
init initializes a new DegreeMapper

ARGUMENT:: max_scala_degree_1based
max degree number (Integer) as defined in the scala definition

ARGUMENT:: score_to_scala_1based
mapping from score degrees to scala degrees (Dictionary[Integer->Integer])

returns:: a new DegreeMapper
METHOD:: score_to_scala
	maps a Degree of kind \score to a degree of kind \scala. This method will warn if the argument is not a Degree of type \score
	

ARGUMENT:: degree
a Degree

returns:: a Degree of kind \scala, or nil if the lookup failed
METHOD:: to_scala
	maps a Degree to \scala. This method will not warn if the passed in degree is already a \scala degree.
	

ARGUMENT:: degree
a Degree

returns:: a Degree of kind \scala, or nil if the lookup failed
METHOD:: printOn
	override of Object.printOn to make sure a DegreeMapper prints something useful when called with .postln
	

ARGUMENT:: stream
stream on which to print

returns:: this instance of DegreeMapper

METHOD:: scala_to_score
	maps a Degree of kind \scala to a degree of kind \score. This method will warn if the argument is not a Degree of type \score.
	Note that such lookup will fail for scala degrees that have no corresponding score degree. Then it returns nil.
	

ARGUMENT:: degree
a Degree

returns:: a Degree of kind \score, or nil if the lookup failed
METHOD:: to_score
	maps a Degree of kind \scala to a degree of kind \score. This method will not warn if the argument is not a Degree of type \score.
	Note that such lookup will fail for scala degrees that have no corresponding score degree. Then it returns nil.
	

ARGUMENT:: degree
a Degree

returns:: a Degree of kind \score, or nil if the lookup failed
METHOD:: next_degree
	next_degree returns the next Degree, taking care of wrapping if needed.
	for degrees of kind \score, the next \score Degree is returned; for degrees of kind \scala, the next \scala Degree is returned
	

ARGUMENT:: degree
a Degree

returns:: the next Degree of the same kind
METHOD:: previous_degree
	previous_degree returns the previous Degree, taking care of wrapping if needed.
	for degrees of kind \score, the previous \score Degree is returned; for degrees of kind \scala, the previous \scala Degree is returned
	

ARGUMENT:: degree
a Degree

returns:: the previous Degree of the same kind

EXAMPLES::

code::
(
var m = DegreeMapper(12, Dictionary[1->1, 2->3, 3->5, 4->6, 5->8, 6->10, 7->12]);
var d1 = Degree(1, 4, \score, \onebased);
var d2 = Degree(2, 4, \score, \onebased);
(m.previous_degree(d1) == Degree(7, 3, \score, \onebased)).debug("check"); // expect true
(m.to_scala(d2) == Degree(3, 4, \scala, \onebased)).debug("check 2"); // expect true
)

::
