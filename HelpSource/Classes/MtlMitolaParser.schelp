TITLE:: MtlMitolaParser
summary:: a parser for mitola scores - not for end users, use MtlMitola instead.
categories:: Microtonal utils
related:: Classes/MtlScalaParser, Classes/MtlMitola

DESCRIPTION::
MtlMitola parser can parse a string or a file containing a valid MtlMitola score and convert it to a parse tree.



CLASSMETHODS::

METHOD:: new
New creates a new MtlMitolaParser

returns:: a new MtlMitolaParser
METHOD:: pr_noteParser
internal method that creates a parser that can parse a single mitola degree and markup the result

returns:: a ScpParser
METHOD:: pr_plusminParser
internal method that creates a parser that can parse a +/- sign as part of a pitch modifier (similar to a flat or sharp in traditional notation) and markup the result

returns:: a ScpParser
METHOD:: pr_betweenCurlyBrackets
internal method that creates a function that can create a parser to parse 'something' between curly brackets

returns:: a function expecting a ScpParser for 'something' as argument, to create a ScpParser that parses 'something' between curly brackets
METHOD:: pr_pitchRatio
internal method that creates a ScpParser to parse a pitch modifier numerical value specified as a ratio and markup the result

returns:: a ScpParser parsing a pitch modifier numerical value ratio [Integer]/[Integer]
METHOD:: pr_nopoint
internal method that creates a ScpParser that fails if the next token is a point

returns:: a ScpParser that fails if the next token is a point
METHOD:: pr_pitchPrimeVector
internal method that creates a ScpParser that parses a pitch modifier numerical value specified as a prime vector

returns:: 	a ScpParser that matches a pitch modifier numerical value specified as a prime vector, i.e. | exp1 exp2 ... expN >
	The exp things are positive/negative integers or ratios which indicate prime factor exponents, e.g.
	| 1/2 > is 2^(1/2) and | -1/2 2/3 > is 2^(-1/2)*3^(2/3).

	The result is marked up.
	
METHOD:: pr_pitchCents
internal method that creates a ScpParser that can parse a pitch modifier numerical value specified in cents

returns:: a ScpParser that parses a pitch modifier numerical value specified in cents and marks up the result
METHOD:: pr_pitchParser
internal method that creates a ScpParser that can parse the pitch part of a pitch modifier in any format (ratio, primevector or cents)

returns:: a ScpParser that parses a pitch modifier in any format (ratio, primevector or cents) and marks up the result
METHOD:: pr_noteModifier
internal method that creates a ScpParser that can parse a pitch modifier in any format (ratio, primevector or cents)

returns:: a ScpParser that parses a pitch modifier and marks up the result; pitch modifiers are optional
METHOD:: pr_restParser
internal method that creates a ScpParser that can parse a rest in a MtlMitola string

returns:: a ScpParser that parses a rest and marks up the result
METHOD:: pr_noteAndMod
internal method that creates a ScpParser that can parse a degree followed by an (optional) pitch modifier or a rest

returns:: a ScpParser that parses a mitola degree followed by an (optional) pitch modifier or a rest
METHOD:: pr_noteAndModAndOct
internal method that creates a ScpParser that can parse a degree followed by an (optional) pitch modifier or a rest and an (optional) equivalence interval (think: octave)

returns:: a ScpParser
METHOD:: pr_betweenSquareBrackets
internal method that creates a function that can create a ScpParser when called with a ScpParser for 'something'. The ScpParser thus created will parse 'something' between square brackets.

returns:: a ScpParser
METHOD:: pr_equivalenceintervalParser
internal method that creates a ScpParser that matches a equivalence interval (think: octave) between square brackets

returns:: a ScpParser
METHOD:: pr_noteAndModAndOctAndDur
internal method that creates a ScpParser that matches a degree followed by pitch modifier, equivalenceinterval (think: octave) and duration, or a rest and duration

returns:: a ScpParser
METHOD:: pr_durationParser
internal method that creates a ScpParser that matches duration specification (i.e. a length and modifiers like dots, muiltiplier and divider)

returns:: a ScpParser
METHOD:: pr_propertyNameParser
internal method that creates a ScpParser that matches a property name. Properties can be attached to MtlMitola degrees and end up as keys in the pbind.

returns:: a ScpParser
METHOD:: pr_propertiesParser
internal method that creates a ScpParser that matches list of property names and values as attached to a mitola degree

returns:: a ScpParser
METHOD:: pr_noteAndModAndOctAndDurAndProp
internal method that creates a ScpParser that matches a mitola degree with all possible markup (modifiers, equivalenceinterval durations, properties)

returns:: a ScpParser
METHOD:: pr_chordParser
internal method that creates a ScpParser that matches a group of degrees grouped into a chord.

returns:: a ScpParser
METHOD:: pr_betweenChordBrackets
internal method that creates a function that can create a ScpParser that parses ;something' between chord brackets

returns:: a function that makes a parser for 'something' between chord brackets if you call it with a ScpParser that parses 'something'
METHOD:: pr_notelistParser
internal method that creates a ScpParser that parses a list of notes

returns:: a ScpParser
METHOD:: pr_betweenRepeatBrackets
internal method that creates a function that can create a ScpParser that parses a list of notes

returns:: a function
METHOD:: pr_mixedNotelist
internal method that creates a (recursive) ScpParser for a list of chords and notes with nested repeat brackets

returns:: a ScpParser
METHOD:: pr_repeatedNotelist
internal method that creates ScpParser to parse chords and notes between repeat brackets e.g. |: 1 2 3 4 :|*2

returns:: a ScpParser

INSTANCEMETHODS::

METHOD:: init
initializes a new MtlMitolaParser

returns:: an initialized MtlMitolaParser object
METHOD:: parse
parses a MtlMitola score; upon failure displays an error msg and returns nil

ARGUMENT:: mitolastring
a string containing a valid mitola score

returns:: 	if successful, parse returns the parse tree
	if unsuccessful, a message is printed and nil is returned
	
METHOD:: parse_file
parses a MtlMitola score from file; upon failure displays an error msg and returns nil

ARGUMENT:: filename
a filename of a file containing a valid mitola score

returns:: 	if successful, parse returns the parse tree
	if unsuccessful, a message is printed and nil is returned
	

EXAMPLES::

code::
(
var score = "1 |: 4 |: 6 7{+50.0} :|*2 :|*3 8{-20.0}>}";
var result = MtlMitolaParser.pr_mixedNotelist.run(score);
// should be true:
result.result == [
			( 'info': (
				'props': [  ],
				'note': (
					'pitch': (
						'what': 'note',
						'equivalenceinterval':
						'previous', 'notename': 0,
						'notemodifier': (
							'kind': 'natural',
							'direction' : 'none',
							'what': 'notemodifier' )),
					'duration': (
						'dur': 'previous',
						'durmultiplier': 'previous',
						'durdivider': 'previous',
						'durdots': 'previous' ))),
			'what': 'singlenote' ),
			( 'info': (
				'props': [  ],
				'note': (
					'pitch': (
						'what': 'note',
						'equivalenceinterval': 'previous',
						'notename': 3,
						'notemodifier': (
							'kind': 'natural',
							'direction' : 'none',
							'what': 'notemodifier' )),
					'duration': (
						'dur': 'previous',
						'durmultiplier': 'previous',
						'durdivider': 'previous',
						'durdots': 'previous' ))),
			'what': 'singlenote' ),
			( 'info': (
				'props': [  ],
				'note': (
					'pitch': (
						'what': 'note',
						'equivalenceinterval': 'previous',
						'notename': 5,
						'notemodifier': (
							'kind': 'natural',
							'direction' : 'none',
							'what': 'notemodifier' )),
					'duration': (
						'dur': 'previous',
						'durmultiplier':
						'previous',
						'durdivider':
						'previous',
						'durdots': 'previous' ))),
			'what': 'singlenote'),
			( 'info':
				( 'props': [  ],
					'note': (
						'pitch': (
							'what': 'note',
							'equivalenceinterval': 'previous',
							'notename': 6, 'notemodifier': (
								'kind': 'cents',
								'what': 'notemodifier',
								'value': (
									'numerator': 50.0,
									'kind': 'cents',
									'what': 'pitch',
									'denominator': 1 ),
								'direction': 'raise' )),
						'duration': (
							'dur': 'previous',
							'durmultiplier': 'previous',
							'durdivider': 'previous',
							'durdots': 'previous' ))),
				'what': 'singlenote'),
			( 'info': (
				'props': [  ],
				'note': (
					'pitch': (
						'what': 'note',
						'equivalenceinterval': 'previous',
						'notename': 5,
						'notemodifier': (
							'kind': 'natural',
							'direction' : 'none',
							'what': 'notemodifier' )),
					'duration': (
						'dur': 'previous',
						'durmultiplier': 'previous',
						'durdivider': 'previous',
						'durdots': 'previous' ))),
			'what': 'singlenote' ),
			( 'info': (
				'props': [  ],
				'note': (
					'pitch': (
						'what': 'note',
						'equivalenceinterval': 'previous',
						'notename': 6,
						'notemodifier': (
							'kind': 'cents',
							'what': 'notemodifier',
							'value': (
								'numerator': 50.0,
								'kind': 'cents',
								'what': 'pitch',
								'denominator': 1 ),
							'direction': 'raise' )),
					'duration': (
						'dur': 'previous',
						'durmultiplier': 'previous',
						'durdivider': 'previous',
						'durdots': 'previous' ))),
			'what': 'singlenote'),
			( 'info': (
				'props': [  ],
				'note': (
					'pitch': (
						'what': 'note',
						'equivalenceinterval': 'previous',
						'notename': 3, 'notemodifier': (
							'kind': 'natural',
							'direction' : 'none',
							'what': 'notemodifier' )),
					'duration': (
						'dur': 'previous',
						'durmultiplier': 'previous',
						'durdivider': 'previous',
						'durdots': 'previous' ))),
			'what': 'singlenote' ),
			( 'info': ( 'props': [  ],
				'note': (
					'pitch': (
						'what': 'note',
						'equivalenceinterval': 'previous',
						'notename': 5,
						'notemodifier': (
							'kind': 'natural',
							'direction' : 'none',
							'what': 'notemodifier' )),
					'duration': (
						'dur': 'previous',
						'durmultiplier': 'previous',
						'durdivider': 'previous',
						'durdots': 'previous' ))),
			'what': 'singlenote' ),
			( 'info': (
				'props': [  ],
				'note': (
					'pitch': (
						'what': 'note',
						'equivalenceinterval': 'previous',
						'notename': 6, 'notemodifier': (
							'kind': 'cents',
							'what': 'notemodifier',
							'value': (
								'numerator': 50.0,
								'kind': 'cents',
								'what': 'pitch',
								'denominator': 1 ),
							'direction': 'raise' ) ),
					'duration': (
						'dur': 'previous',
						'durmultiplier': 'previous',
						'durdivider': 'previous',
						'durdots': 'previous' ))),
			'what': 'singlenote' ),
			( 'info': (
				'props': [  ],
				'note': ( 'pitch': (
					'what': 'note',
					'equivalenceinterval': 'previous',
					'notename': 5,
					'notemodifier': (
						'kind': 'natural',
						'direction' : 'none',
						'what': 'notemodifier' )),
				'duration': (
					'dur': 'previous',
					'durmultiplier':
					'previous',
					'durdivider':
					'previous',
					'durdots': 'previous' ))),
			'what': 'singlenote'),
			( 'info': (
				'props': [  ],
				'note': (
					'pitch': (
						'what': 'note',
						'equivalenceinterval': 'previous',
						'notename': 6, 'notemodifier': (
							'kind': 'cents',
							'what': 'notemodifier',
							'value': (
								'numerator': 50.0,
								'kind': 'cents',
								'what': 'pitch',
								'denominator': 1 ),
							'direction': 'raise' )),
					'duration': (
						'dur': 'previous',
						'durmultiplier': 'previous',
						'durdivider': 'previous',
						'durdots': 'previous' ))),
			'what': 'singlenote'),
			( 'info': (
				'props': [  ],
				'note': (
					'pitch': (
						'what': 'note',
						'equivalenceinterval': 'previous',
						'notename': 3,
						'notemodifier': (
							'kind': 'natural',
							'direction' : 'none',
							'what': 'notemodifier' )),
					'duration': (
						'dur': 'previous',
						'durmultiplier': 'previous',
						'durdivider': 'previous',
						'durdots': 'previous' ))),
			'what': 'singlenote' ),
			( 'info': (
				'props': [  ],
				'note': (
					'pitch': (
						'what': 'note',
						'equivalenceinterval': 'previous',
						'notename': 5,
						'notemodifier': (
							'kind': 'natural',
							'direction' : 'none',
							'what': 'notemodifier' )),
					'duration': (
						'dur': 'previous',
						'durmultiplier': 'previous',
						'durdivider': 'previous',
						'durdots': 'previous' ))),
			'what': 'singlenote' ),
			( 'info': (
				'props': [  ],
				'note': (
					'pitch': (
						'what': 'note',
						'equivalenceinterval': 'previous',
						'notename': 6,
						'notemodifier': (
							'kind': 'cents',
							'what': 'notemodifier',
							'value': (
								'numerator': 50.0,
								'kind': 'cents',
								'what': 'pitch',
								'denominator': 1 ),
							'direction': 'raise' )),
					'duration': (
						'dur': 'previous',
						'durmultiplier': 'previous',
						'durdivider': 'previous',
						'durdots': 'previous' ))),
			'what': 'singlenote' ),
			( 'info': (
				'props': [  ],
				'note': (
					'pitch': (
						'what': 'note',
						'equivalenceinterval': 'previous',
						'notename': 5,
						'notemodifier': (
							'kind': 'natural',
							'direction' : 'none',
							'what': 'notemodifier' )),
					'duration': (
						'dur': 'previous',
						'durmultiplier': 'previous',
						'durdivider': 'previous',
						'durdots': 'previous' ))),
			'what': 'singlenote' ),
			( 'info': (
				'props': [  ],
				'note': (
					'pitch': (
						'what': 'note',
						'equivalenceinterval': 'previous',
						'notename': 6,
						'notemodifier': (
							'kind': 'cents',
							'what': 'notemodifier',
							'value': (
								'numerator': 50.0,
								'kind': 'cents',
								'what': 'pitch',
								'denominator': 1 ),
							'direction': 'raise' )),
					'duration': (
						'dur': 'previous',
						'durmultiplier': 'previous',
						'durdivider': 'previous',
						'durdots': 'previous' ))),
			'what': 'singlenote' ),
			( 'info': (
				'props': [  ],
				'note': (
					'pitch': (
						'what': 'note',
						'equivalenceinterval': 'previous',
						'notename': 7, 'notemodifier': (
							'kind': 'cents',
							'what': 'notemodifier',
							'value': (
								'numerator': 20.0,
								'kind': 'cents',
								'what': 'pitch',
								'denominator': 1 ),
							'direction': 'lower' )),
					'duration': (
						'dur': 'previous',
						'durmultiplier': 'previous',
						'durdivider': 'previous',
						'durdots': 'previous' ))),
			'what': 'singlenote' ) ];
)

::
